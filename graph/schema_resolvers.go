package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"

	"corrigan.io/go_api_seed/graph/dto"
	"corrigan.io/go_api_seed/graph/serializers"
	"corrigan.io/go_api_seed/internal/entities"
	"corrigan.io/go_api_seed/internal/services"
	"corrigan.io/go_api_seed/internal/usercontext"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, payload dto.CreateUserPayload) (dto.CreateUserResult, error) {
	entity, err := r.services.UserService.CreateUser(ctx, services.CreateUserArgs{
		GivenName:  payload.GivenName,
		FamilyName: payload.FamilyName,
		Email:      payload.Email,
		Password:   payload.Password,
	})
	if err != nil {
		r.logger.Err(err).Ctx(ctx).Msg("Create user")
		return serializers.CreateUserErrorSerializer(err)
	}

	response := serializers.UserSerializer(entity)
	return &response, nil
}

// AuthenticateWithPassword is the resolver for the authenticateWithPassword field.
func (r *mutationResolver) AuthenticateWithPassword(ctx context.Context, email string, password string) (dto.UserSessionResult, error) {
	entity, err := r.services.UserService.AuthenticateWithPassword(ctx, email, password)
	if err != nil {
		r.logger.Err(err).Ctx(ctx).Msg("Authenticate with password")
		return serializers.UserSessionErrorSerializer(err)
	}

	response := serializers.UserSessionSerializer(entity)
	return &response, nil
}

// AuthenticateWithGoogleCode is the resolver for the authenticateWithGoogleCode field.
func (r *mutationResolver) AuthenticateWithGoogleCode(ctx context.Context, code string) (dto.UserSessionResult, error) {
	entity, err := r.services.OAuthService.LoginWithGoogleCode(ctx, code)
	if err != nil {
		r.logger.Err(err).Ctx(ctx).Msg("Authenticate with Google")
		return serializers.UserSessionErrorSerializer(err)
	}

	response := serializers.UserSessionSerializer(entity)
	return &response, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (dto.UserResult, error) {
	user := usercontext.ContextGetUser(ctx)
	if user != nil {
		response := serializers.UserSerializer(user)
		return &response, nil
	} else {
		err := entities.ErrUserNotFound
		return serializers.UserErrorSerializer(err)
	}
}

// UserByID is the resolver for the userByID field.
func (r *queryResolver) UserByID(ctx context.Context, id string) (dto.UserResult, error) {
	entity, err := r.services.UserService.GetUserByID(ctx, id)
	if err != nil {
		r.logger.Err(err).Ctx(ctx).Msg("Get user by ID")
		return serializers.UserErrorSerializer(err)
	}

	response := serializers.UserSerializer(entity)
	return &response, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
